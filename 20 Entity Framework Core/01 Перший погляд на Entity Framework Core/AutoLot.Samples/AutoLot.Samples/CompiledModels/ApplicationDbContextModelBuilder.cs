// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace AutoLot.Samples.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var car = CarEntityType.Create(this);
            var carDriver = CarDriverEntityType.Create(this);
            var driver = DriverEntityType.Create(this);
            var make = MakeEntityType.Create(this);
            var person = PersonEntityType.Create(this);
            var radio = RadioEntityType.Create(this);
            var carMakeViewModel = CarMakeViewModelEntityType.Create(this);

            CarEntityType.CreateForeignKey1(car, make);
            CarDriverEntityType.CreateForeignKey1(carDriver, car);
            CarDriverEntityType.CreateForeignKey2(carDriver, driver);
            PersonEntityType.CreateForeignKey1(person, driver);
            RadioEntityType.CreateForeignKey1(radio, car);

            CarEntityType.CreateSkipNavigation1(car, driver, carDriver);
            DriverEntityType.CreateSkipNavigation1(driver, car, carDriver);

            CarEntityType.CreateAnnotations(car);
            CarDriverEntityType.CreateAnnotations(carDriver);
            DriverEntityType.CreateAnnotations(driver);
            MakeEntityType.CreateAnnotations(make);
            PersonEntityType.CreateAnnotations(person);
            RadioEntityType.CreateAnnotations(radio);
            CarMakeViewModelEntityType.CreateAnnotations(carMakeViewModel);

            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var car = FindEntityType("AutoLot.Samples.Models.Car")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            car.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var autoLotSamplesModelsCarTableBase = new TableBase("AutoLot.Samples.Models.Car", null, relationalModel);
            var colorColumnBase = new ColumnBase<ColumnMappingBase>("Color", "nvarchar(50)", autoLotSamplesModelsCarTableBase);
            autoLotSamplesModelsCarTableBase.Columns.Add("Color", colorColumnBase);
            var dateBuiltColumnBase = new ColumnBase<ColumnMappingBase>("DateBuilt", "datetime2", autoLotSamplesModelsCarTableBase)
            {
                IsNullable = true
            };
            autoLotSamplesModelsCarTableBase.Columns.Add("DateBuilt", dateBuiltColumnBase);
            var displayColumnBase = new ColumnBase<ColumnMappingBase>("Display", "nvarchar(max)", autoLotSamplesModelsCarTableBase);
            autoLotSamplesModelsCarTableBase.Columns.Add("Display", displayColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", autoLotSamplesModelsCarTableBase);
            autoLotSamplesModelsCarTableBase.Columns.Add("Id", idColumnBase);
            var isDrivableColumnBase = new ColumnBase<ColumnMappingBase>("IsDrivable", "bit", autoLotSamplesModelsCarTableBase)
            {
                IsNullable = true
            };
            autoLotSamplesModelsCarTableBase.Columns.Add("IsDrivable", isDrivableColumnBase);
            var makeIdColumnBase = new ColumnBase<ColumnMappingBase>("MakeId", "int", autoLotSamplesModelsCarTableBase);
            autoLotSamplesModelsCarTableBase.Columns.Add("MakeId", makeIdColumnBase);
            var petNameColumnBase = new ColumnBase<ColumnMappingBase>("PetName", "nvarchar(50)", autoLotSamplesModelsCarTableBase);
            autoLotSamplesModelsCarTableBase.Columns.Add("PetName", petNameColumnBase);
            var timeStampColumnBase = new ColumnBase<ColumnMappingBase>("TimeStamp", "rowversion", autoLotSamplesModelsCarTableBase);
            autoLotSamplesModelsCarTableBase.Columns.Add("TimeStamp", timeStampColumnBase);
            relationalModel.DefaultTables.Add("AutoLot.Samples.Models.Car", autoLotSamplesModelsCarTableBase);
            var autoLotSamplesModelsCarMappingBase = new TableMappingBase<ColumnMappingBase>(car, autoLotSamplesModelsCarTableBase, true);
            autoLotSamplesModelsCarTableBase.AddTypeMapping(autoLotSamplesModelsCarMappingBase, false);
            defaultTableMappings.Add(autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, car.FindProperty("Id")!, autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)colorColumnBase, car.FindProperty("Color")!, autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateBuiltColumnBase, car.FindProperty("DateBuilt")!, autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayColumnBase, car.FindProperty("Display")!, autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDrivableColumnBase, car.FindProperty("IsDrivable")!, autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)makeIdColumnBase, car.FindProperty("MakeId")!, autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)petNameColumnBase, car.FindProperty("PetName")!, autoLotSamplesModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeStampColumnBase, car.FindProperty("TimeStamp")!, autoLotSamplesModelsCarMappingBase);

            var tableMappings = new List<TableMapping>();
            car.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var inventoryTable = new Table("Inventory", "dbo", relationalModel);
            var idColumn = new Column("Id", "int", inventoryTable);
            inventoryTable.Columns.Add("Id", idColumn);
            var colorColumn = new Column("Color", "nvarchar(50)", inventoryTable);
            inventoryTable.Columns.Add("Color", colorColumn);
            var dateBuiltColumn = new Column("DateBuilt", "datetime2", inventoryTable)
            {
                IsNullable = true
            };
            inventoryTable.Columns.Add("DateBuilt", dateBuiltColumn);
            var displayColumn = new Column("Display", "nvarchar(max)", inventoryTable);
            inventoryTable.Columns.Add("Display", displayColumn);
            var isDrivableColumn = new Column("IsDrivable", "bit", inventoryTable)
            {
                IsNullable = true
            };
            inventoryTable.Columns.Add("IsDrivable", isDrivableColumn);
            var makeIdColumn = new Column("MakeId", "int", inventoryTable);
            inventoryTable.Columns.Add("MakeId", makeIdColumn);
            var petNameColumn = new Column("PetName", "nvarchar(50)", inventoryTable);
            inventoryTable.Columns.Add("PetName", petNameColumn);
            var timeStampColumn = new Column("TimeStamp", "rowversion", inventoryTable);
            inventoryTable.Columns.Add("TimeStamp", timeStampColumn);
            var pK_Inventory = new UniqueConstraint("PK_Inventory", inventoryTable, new[] { idColumn });
            inventoryTable.PrimaryKey = pK_Inventory;
            var pK_InventoryUc = RelationalModel.GetKey(this,
                "AutoLot.Samples.Models.Car",
                new[] { "Id" });
            pK_Inventory.MappedKeys.Add(pK_InventoryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InventoryUc).Add(pK_Inventory);
            inventoryTable.UniqueConstraints.Add("PK_Inventory", pK_Inventory);
            var iX_Inventory_MakeId = new TableIndex(
            "IX_Inventory_MakeId", inventoryTable, new[] { makeIdColumn }, false);
            var iX_Inventory_MakeIdIx = RelationalModel.GetIndex(this,
                "AutoLot.Samples.Models.Car",
                "IX_Inventory_MakeId");
            iX_Inventory_MakeId.MappedIndexes.Add(iX_Inventory_MakeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Inventory_MakeIdIx).Add(iX_Inventory_MakeId);
            inventoryTable.Indexes.Add("IX_Inventory_MakeId", iX_Inventory_MakeId);
            relationalModel.Tables.Add(("Inventory", "dbo"), inventoryTable);
            var inventoryTableMapping = new TableMapping(car, inventoryTable, true);
            inventoryTable.AddTypeMapping(inventoryTableMapping, false);
            tableMappings.Add(inventoryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, car.FindProperty("Id")!, inventoryTableMapping);
            RelationalModel.CreateColumnMapping(colorColumn, car.FindProperty("Color")!, inventoryTableMapping);
            RelationalModel.CreateColumnMapping(dateBuiltColumn, car.FindProperty("DateBuilt")!, inventoryTableMapping);
            RelationalModel.CreateColumnMapping(displayColumn, car.FindProperty("Display")!, inventoryTableMapping);
            RelationalModel.CreateColumnMapping(isDrivableColumn, car.FindProperty("IsDrivable")!, inventoryTableMapping);
            RelationalModel.CreateColumnMapping(makeIdColumn, car.FindProperty("MakeId")!, inventoryTableMapping);
            RelationalModel.CreateColumnMapping(petNameColumn, car.FindProperty("PetName")!, inventoryTableMapping);
            RelationalModel.CreateColumnMapping(timeStampColumn, car.FindProperty("TimeStamp")!, inventoryTableMapping);

            var carDriver = FindEntityType("AutoLot.Samples.Models.CarDriver")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            carDriver.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var autoLotSamplesModelsCarDriverTableBase = new TableBase("AutoLot.Samples.Models.CarDriver", null, relationalModel);
            var driverIdColumnBase = new ColumnBase<ColumnMappingBase>("DriverId", "int", autoLotSamplesModelsCarDriverTableBase);
            autoLotSamplesModelsCarDriverTableBase.Columns.Add("DriverId", driverIdColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", autoLotSamplesModelsCarDriverTableBase);
            autoLotSamplesModelsCarDriverTableBase.Columns.Add("Id", idColumnBase0);
            var inventoryIdColumnBase = new ColumnBase<ColumnMappingBase>("InventoryId", "int", autoLotSamplesModelsCarDriverTableBase);
            autoLotSamplesModelsCarDriverTableBase.Columns.Add("InventoryId", inventoryIdColumnBase);
            var timeStampColumnBase0 = new ColumnBase<ColumnMappingBase>("TimeStamp", "rowversion", autoLotSamplesModelsCarDriverTableBase);
            autoLotSamplesModelsCarDriverTableBase.Columns.Add("TimeStamp", timeStampColumnBase0);
            relationalModel.DefaultTables.Add("AutoLot.Samples.Models.CarDriver", autoLotSamplesModelsCarDriverTableBase);
            var autoLotSamplesModelsCarDriverMappingBase = new TableMappingBase<ColumnMappingBase>(carDriver, autoLotSamplesModelsCarDriverTableBase, true);
            autoLotSamplesModelsCarDriverTableBase.AddTypeMapping(autoLotSamplesModelsCarDriverMappingBase, false);
            defaultTableMappings0.Add(autoLotSamplesModelsCarDriverMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inventoryIdColumnBase, carDriver.FindProperty("CarId")!, autoLotSamplesModelsCarDriverMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)driverIdColumnBase, carDriver.FindProperty("DriverId")!, autoLotSamplesModelsCarDriverMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, carDriver.FindProperty("Id")!, autoLotSamplesModelsCarDriverMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeStampColumnBase0, carDriver.FindProperty("TimeStamp")!, autoLotSamplesModelsCarDriverMappingBase);

            var tableMappings0 = new List<TableMapping>();
            carDriver.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var inventoryToDriversTable = new Table("InventoryToDrivers", "dbo", relationalModel);
            var inventoryIdColumn = new Column("InventoryId", "int", inventoryToDriversTable);
            inventoryToDriversTable.Columns.Add("InventoryId", inventoryIdColumn);
            var driverIdColumn = new Column("DriverId", "int", inventoryToDriversTable);
            inventoryToDriversTable.Columns.Add("DriverId", driverIdColumn);
            var idColumn0 = new Column("Id", "int", inventoryToDriversTable);
            inventoryToDriversTable.Columns.Add("Id", idColumn0);
            var timeStampColumn0 = new Column("TimeStamp", "rowversion", inventoryToDriversTable);
            inventoryToDriversTable.Columns.Add("TimeStamp", timeStampColumn0);
            var pK_InventoryToDrivers = new UniqueConstraint("PK_InventoryToDrivers", inventoryToDriversTable, new[] { inventoryIdColumn, driverIdColumn });
            inventoryToDriversTable.PrimaryKey = pK_InventoryToDrivers;
            var pK_InventoryToDriversUc = RelationalModel.GetKey(this,
                "AutoLot.Samples.Models.CarDriver",
                new[] { "CarId", "DriverId" });
            pK_InventoryToDrivers.MappedKeys.Add(pK_InventoryToDriversUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InventoryToDriversUc).Add(pK_InventoryToDrivers);
            inventoryToDriversTable.UniqueConstraints.Add("PK_InventoryToDrivers", pK_InventoryToDrivers);
            var iX_InventoryToDrivers_DriverId = new TableIndex(
            "IX_InventoryToDrivers_DriverId", inventoryToDriversTable, new[] { driverIdColumn }, false);
            var iX_InventoryToDrivers_DriverIdIx = RelationalModel.GetIndex(this,
                "AutoLot.Samples.Models.CarDriver",
                new[] { "DriverId" });
            iX_InventoryToDrivers_DriverId.MappedIndexes.Add(iX_InventoryToDrivers_DriverIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_InventoryToDrivers_DriverIdIx).Add(iX_InventoryToDrivers_DriverId);
            inventoryToDriversTable.Indexes.Add("IX_InventoryToDrivers_DriverId", iX_InventoryToDrivers_DriverId);
            relationalModel.Tables.Add(("InventoryToDrivers", "dbo"), inventoryToDriversTable);
            var inventoryToDriversTableMapping = new TableMapping(carDriver, inventoryToDriversTable, true);
            inventoryToDriversTable.AddTypeMapping(inventoryToDriversTableMapping, false);
            tableMappings0.Add(inventoryToDriversTableMapping);
            RelationalModel.CreateColumnMapping(inventoryIdColumn, carDriver.FindProperty("CarId")!, inventoryToDriversTableMapping);
            RelationalModel.CreateColumnMapping(driverIdColumn, carDriver.FindProperty("DriverId")!, inventoryToDriversTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, carDriver.FindProperty("Id")!, inventoryToDriversTableMapping);
            RelationalModel.CreateColumnMapping(timeStampColumn0, carDriver.FindProperty("TimeStamp")!, inventoryToDriversTableMapping);

            var driver = FindEntityType("AutoLot.Samples.Models.Driver")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            driver.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var autoLotSamplesModelsDriverTableBase = new TableBase("AutoLot.Samples.Models.Driver", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", autoLotSamplesModelsDriverTableBase);
            autoLotSamplesModelsDriverTableBase.Columns.Add("Id", idColumnBase1);
            var timeStampColumnBase1 = new ColumnBase<ColumnMappingBase>("TimeStamp", "rowversion", autoLotSamplesModelsDriverTableBase);
            autoLotSamplesModelsDriverTableBase.Columns.Add("TimeStamp", timeStampColumnBase1);
            relationalModel.DefaultTables.Add("AutoLot.Samples.Models.Driver", autoLotSamplesModelsDriverTableBase);
            var autoLotSamplesModelsDriverMappingBase = new TableMappingBase<ColumnMappingBase>(driver, autoLotSamplesModelsDriverTableBase, true);
            autoLotSamplesModelsDriverTableBase.AddTypeMapping(autoLotSamplesModelsDriverMappingBase, false);
            defaultTableMappings1.Add(autoLotSamplesModelsDriverMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, driver.FindProperty("Id")!, autoLotSamplesModelsDriverMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeStampColumnBase1, driver.FindProperty("TimeStamp")!, autoLotSamplesModelsDriverMappingBase);

            var tableMappings1 = new List<TableMapping>();
            driver.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var driversTable = new Table("Drivers", null, relationalModel);
            var idColumn1 = new Column("Id", "int", driversTable);
            driversTable.Columns.Add("Id", idColumn1);
            var firstNameColumn = new Column("FirstName", "nvarchar(50)", driversTable);
            driversTable.Columns.Add("FirstName", firstNameColumn);
            var lastNameColumn = new Column("LastName", "nvarchar(50)", driversTable);
            driversTable.Columns.Add("LastName", lastNameColumn);
            var timeStampColumn1 = new Column("TimeStamp", "rowversion", driversTable);
            driversTable.Columns.Add("TimeStamp", timeStampColumn1);
            var pK_Drivers = new UniqueConstraint("PK_Drivers", driversTable, new[] { idColumn1 });
            driversTable.PrimaryKey = pK_Drivers;
            var pK_DriversUc = RelationalModel.GetKey(this,
                "AutoLot.Samples.Models.Person",
                new[] { "DriverId" });
            pK_Drivers.MappedKeys.Add(pK_DriversUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DriversUc).Add(pK_Drivers);
            var pK_DriversUc0 = RelationalModel.GetKey(this,
                "AutoLot.Samples.Models.Driver",
                new[] { "Id" });
            pK_Drivers.MappedKeys.Add(pK_DriversUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DriversUc0).Add(pK_Drivers);
            driversTable.UniqueConstraints.Add("PK_Drivers", pK_Drivers);
            relationalModel.Tables.Add(("Drivers", null), driversTable);
            var driversTableMapping = new TableMapping(driver, driversTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            driversTable.AddTypeMapping(driversTableMapping, false);
            tableMappings1.Add(driversTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, driver.FindProperty("Id")!, driversTableMapping);
            RelationalModel.CreateColumnMapping(timeStampColumn1, driver.FindProperty("TimeStamp")!, driversTableMapping);

            var make = FindEntityType("AutoLot.Samples.Models.Make")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            make.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var autoLotSamplesModelsMakeTableBase = new TableBase("AutoLot.Samples.Models.Make", null, relationalModel);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", autoLotSamplesModelsMakeTableBase);
            autoLotSamplesModelsMakeTableBase.Columns.Add("Id", idColumnBase2);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(50)", autoLotSamplesModelsMakeTableBase);
            autoLotSamplesModelsMakeTableBase.Columns.Add("Name", nameColumnBase);
            var timeStampColumnBase2 = new ColumnBase<ColumnMappingBase>("TimeStamp", "rowversion", autoLotSamplesModelsMakeTableBase);
            autoLotSamplesModelsMakeTableBase.Columns.Add("TimeStamp", timeStampColumnBase2);
            relationalModel.DefaultTables.Add("AutoLot.Samples.Models.Make", autoLotSamplesModelsMakeTableBase);
            var autoLotSamplesModelsMakeMappingBase = new TableMappingBase<ColumnMappingBase>(make, autoLotSamplesModelsMakeTableBase, true);
            autoLotSamplesModelsMakeTableBase.AddTypeMapping(autoLotSamplesModelsMakeMappingBase, false);
            defaultTableMappings2.Add(autoLotSamplesModelsMakeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, make.FindProperty("Id")!, autoLotSamplesModelsMakeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, make.FindProperty("Name")!, autoLotSamplesModelsMakeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeStampColumnBase2, make.FindProperty("TimeStamp")!, autoLotSamplesModelsMakeMappingBase);

            var tableMappings2 = new List<TableMapping>();
            make.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var makesTable = new Table("Makes", "dbo", relationalModel);
            var idColumn2 = new Column("Id", "int", makesTable);
            makesTable.Columns.Add("Id", idColumn2);
            var nameColumn = new Column("Name", "nvarchar(50)", makesTable);
            makesTable.Columns.Add("Name", nameColumn);
            var timeStampColumn2 = new Column("TimeStamp", "rowversion", makesTable);
            makesTable.Columns.Add("TimeStamp", timeStampColumn2);
            var pK_Makes = new UniqueConstraint("PK_Makes", makesTable, new[] { idColumn2 });
            makesTable.PrimaryKey = pK_Makes;
            var pK_MakesUc = RelationalModel.GetKey(this,
                "AutoLot.Samples.Models.Make",
                new[] { "Id" });
            pK_Makes.MappedKeys.Add(pK_MakesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MakesUc).Add(pK_Makes);
            makesTable.UniqueConstraints.Add("PK_Makes", pK_Makes);
            relationalModel.Tables.Add(("Makes", "dbo"), makesTable);
            var makesTableMapping = new TableMapping(make, makesTable, true);
            makesTable.AddTypeMapping(makesTableMapping, false);
            tableMappings2.Add(makesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, make.FindProperty("Id")!, makesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, make.FindProperty("Name")!, makesTableMapping);
            RelationalModel.CreateColumnMapping(timeStampColumn2, make.FindProperty("TimeStamp")!, makesTableMapping);

            var person = FindEntityType("AutoLot.Samples.Models.Person")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            person.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var autoLotSamplesModelsPersonTableBase = new TableBase("AutoLot.Samples.Models.Person", null, relationalModel);
            var driverIdColumnBase0 = new ColumnBase<ColumnMappingBase>("DriverId", "int", autoLotSamplesModelsPersonTableBase);
            autoLotSamplesModelsPersonTableBase.Columns.Add("DriverId", driverIdColumnBase0);
            var firstNameColumnBase = new ColumnBase<ColumnMappingBase>("FirstName", "nvarchar(50)", autoLotSamplesModelsPersonTableBase);
            autoLotSamplesModelsPersonTableBase.Columns.Add("FirstName", firstNameColumnBase);
            var lastNameColumnBase = new ColumnBase<ColumnMappingBase>("LastName", "nvarchar(50)", autoLotSamplesModelsPersonTableBase);
            autoLotSamplesModelsPersonTableBase.Columns.Add("LastName", lastNameColumnBase);
            relationalModel.DefaultTables.Add("AutoLot.Samples.Models.Person", autoLotSamplesModelsPersonTableBase);
            var autoLotSamplesModelsPersonMappingBase = new TableMappingBase<ColumnMappingBase>(person, autoLotSamplesModelsPersonTableBase, true);
            autoLotSamplesModelsPersonTableBase.AddTypeMapping(autoLotSamplesModelsPersonMappingBase, false);
            defaultTableMappings3.Add(autoLotSamplesModelsPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)driverIdColumnBase0, person.FindProperty("DriverId")!, autoLotSamplesModelsPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase, person.FindProperty("FirstName")!, autoLotSamplesModelsPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase, person.FindProperty("LastName")!, autoLotSamplesModelsPersonMappingBase);

            var tableMappings3 = new List<TableMapping>();
            person.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var driversTableMapping0 = new TableMapping(person, driversTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            driversTable.AddTypeMapping(driversTableMapping0, false);
            tableMappings3.Add(driversTableMapping0);
            driversTable.AddRowInternalForeignKey(person, RelationalModel.GetForeignKey(this,
                "AutoLot.Samples.Models.Person",
                new[] { "DriverId" },
                "AutoLot.Samples.Models.Driver",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn1, person.FindProperty("DriverId")!, driversTableMapping0);
            RelationalModel.CreateColumnMapping(firstNameColumn, person.FindProperty("FirstName")!, driversTableMapping0);
            RelationalModel.CreateColumnMapping(lastNameColumn, person.FindProperty("LastName")!, driversTableMapping0);

            var radio = FindEntityType("AutoLot.Samples.Models.Radio")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            radio.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var autoLotSamplesModelsRadioTableBase = new TableBase("AutoLot.Samples.Models.Radio", null, relationalModel);
            var hasSubWoofersColumnBase = new ColumnBase<ColumnMappingBase>("HasSubWoofers", "bit", autoLotSamplesModelsRadioTableBase);
            autoLotSamplesModelsRadioTableBase.Columns.Add("HasSubWoofers", hasSubWoofersColumnBase);
            var hasTweetersColumnBase = new ColumnBase<ColumnMappingBase>("HasTweeters", "bit", autoLotSamplesModelsRadioTableBase);
            autoLotSamplesModelsRadioTableBase.Columns.Add("HasTweeters", hasTweetersColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "int", autoLotSamplesModelsRadioTableBase);
            autoLotSamplesModelsRadioTableBase.Columns.Add("Id", idColumnBase3);
            var inventoryIdColumnBase0 = new ColumnBase<ColumnMappingBase>("InventoryId", "int", autoLotSamplesModelsRadioTableBase);
            autoLotSamplesModelsRadioTableBase.Columns.Add("InventoryId", inventoryIdColumnBase0);
            var radioIdColumnBase = new ColumnBase<ColumnMappingBase>("RadioId", "nvarchar(50)", autoLotSamplesModelsRadioTableBase);
            autoLotSamplesModelsRadioTableBase.Columns.Add("RadioId", radioIdColumnBase);
            var timeStampColumnBase3 = new ColumnBase<ColumnMappingBase>("TimeStamp", "rowversion", autoLotSamplesModelsRadioTableBase);
            autoLotSamplesModelsRadioTableBase.Columns.Add("TimeStamp", timeStampColumnBase3);
            relationalModel.DefaultTables.Add("AutoLot.Samples.Models.Radio", autoLotSamplesModelsRadioTableBase);
            var autoLotSamplesModelsRadioMappingBase = new TableMappingBase<ColumnMappingBase>(radio, autoLotSamplesModelsRadioTableBase, true);
            autoLotSamplesModelsRadioTableBase.AddTypeMapping(autoLotSamplesModelsRadioMappingBase, false);
            defaultTableMappings4.Add(autoLotSamplesModelsRadioMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, radio.FindProperty("Id")!, autoLotSamplesModelsRadioMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inventoryIdColumnBase0, radio.FindProperty("CarId")!, autoLotSamplesModelsRadioMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hasSubWoofersColumnBase, radio.FindProperty("HasSubWoofers")!, autoLotSamplesModelsRadioMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hasTweetersColumnBase, radio.FindProperty("HasTweeters")!, autoLotSamplesModelsRadioMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)radioIdColumnBase, radio.FindProperty("RadioId")!, autoLotSamplesModelsRadioMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeStampColumnBase3, radio.FindProperty("TimeStamp")!, autoLotSamplesModelsRadioMappingBase);

            var tableMappings4 = new List<TableMapping>();
            radio.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var radiosTable = new Table("Radios", null, relationalModel);
            var idColumn3 = new Column("Id", "int", radiosTable);
            radiosTable.Columns.Add("Id", idColumn3);
            var hasSubWoofersColumn = new Column("HasSubWoofers", "bit", radiosTable);
            radiosTable.Columns.Add("HasSubWoofers", hasSubWoofersColumn);
            var hasTweetersColumn = new Column("HasTweeters", "bit", radiosTable);
            radiosTable.Columns.Add("HasTweeters", hasTweetersColumn);
            var inventoryIdColumn0 = new Column("InventoryId", "int", radiosTable);
            radiosTable.Columns.Add("InventoryId", inventoryIdColumn0);
            var radioIdColumn = new Column("RadioId", "nvarchar(50)", radiosTable);
            radiosTable.Columns.Add("RadioId", radioIdColumn);
            var timeStampColumn3 = new Column("TimeStamp", "rowversion", radiosTable);
            radiosTable.Columns.Add("TimeStamp", timeStampColumn3);
            var pK_Radios = new UniqueConstraint("PK_Radios", radiosTable, new[] { idColumn3 });
            radiosTable.PrimaryKey = pK_Radios;
            var pK_RadiosUc = RelationalModel.GetKey(this,
                "AutoLot.Samples.Models.Radio",
                new[] { "Id" });
            pK_Radios.MappedKeys.Add(pK_RadiosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RadiosUc).Add(pK_Radios);
            radiosTable.UniqueConstraints.Add("PK_Radios", pK_Radios);
            var iX_Radios_InventoryId = new TableIndex(
            "IX_Radios_InventoryId", radiosTable, new[] { inventoryIdColumn0 }, true);
            var iX_Radios_InventoryIdIx = RelationalModel.GetIndex(this,
                "AutoLot.Samples.Models.Radio",
                "IX_Radios_InventoryId");
            iX_Radios_InventoryId.MappedIndexes.Add(iX_Radios_InventoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Radios_InventoryIdIx).Add(iX_Radios_InventoryId);
            radiosTable.Indexes.Add("IX_Radios_InventoryId", iX_Radios_InventoryId);
            relationalModel.Tables.Add(("Radios", null), radiosTable);
            var radiosTableMapping = new TableMapping(radio, radiosTable, true);
            radiosTable.AddTypeMapping(radiosTableMapping, false);
            tableMappings4.Add(radiosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, radio.FindProperty("Id")!, radiosTableMapping);
            RelationalModel.CreateColumnMapping(inventoryIdColumn0, radio.FindProperty("CarId")!, radiosTableMapping);
            RelationalModel.CreateColumnMapping(hasSubWoofersColumn, radio.FindProperty("HasSubWoofers")!, radiosTableMapping);
            RelationalModel.CreateColumnMapping(hasTweetersColumn, radio.FindProperty("HasTweeters")!, radiosTableMapping);
            RelationalModel.CreateColumnMapping(radioIdColumn, radio.FindProperty("RadioId")!, radiosTableMapping);
            RelationalModel.CreateColumnMapping(timeStampColumn3, radio.FindProperty("TimeStamp")!, radiosTableMapping);

            var carMakeViewModel = FindEntityType("AutoLot.Samples.ViewModels.CarMakeViewModel")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            carMakeViewModel.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var autoLotSamplesViewModelsCarMakeViewModelTableBase = new TableBase("AutoLot.Samples.ViewModels.CarMakeViewModel", null, relationalModel);
            var carIdColumnBase = new ColumnBase<ColumnMappingBase>("CarId", "int", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("CarId", carIdColumnBase);
            var colorColumnBase0 = new ColumnBase<ColumnMappingBase>("Color", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("Color", colorColumnBase0);
            var dateBuildColumnBase = new ColumnBase<ColumnMappingBase>("DateBuild", "datetime2", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("DateBuild", dateBuildColumnBase);
            var displayColumnBase0 = new ColumnBase<ColumnMappingBase>("Display", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("Display", displayColumnBase0);
            var isDrivableColumnBase0 = new ColumnBase<ColumnMappingBase>("IsDrivable", "bit", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("IsDrivable", isDrivableColumnBase0);
            var makeColumnBase = new ColumnBase<ColumnMappingBase>("Make", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("Make", makeColumnBase);
            var makeIdColumnBase0 = new ColumnBase<ColumnMappingBase>("MakeId", "int", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("MakeId", makeIdColumnBase0);
            var petNameColumnBase0 = new ColumnBase<ColumnMappingBase>("PetName", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.Columns.Add("PetName", petNameColumnBase0);
            relationalModel.DefaultTables.Add("AutoLot.Samples.ViewModels.CarMakeViewModel", autoLotSamplesViewModelsCarMakeViewModelTableBase);
            var autoLotSamplesViewModelsCarMakeViewModelMappingBase = new TableMappingBase<ColumnMappingBase>(carMakeViewModel, autoLotSamplesViewModelsCarMakeViewModelTableBase, true);
            autoLotSamplesViewModelsCarMakeViewModelTableBase.AddTypeMapping(autoLotSamplesViewModelsCarMakeViewModelMappingBase, false);
            defaultTableMappings5.Add(autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)carIdColumnBase, carMakeViewModel.FindProperty("CarId")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)colorColumnBase0, carMakeViewModel.FindProperty("Color")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateBuildColumnBase, carMakeViewModel.FindProperty("DateBuild")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayColumnBase0, carMakeViewModel.FindProperty("Display")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDrivableColumnBase0, carMakeViewModel.FindProperty("IsDrivable")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)makeColumnBase, carMakeViewModel.FindProperty("Make")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)makeIdColumnBase0, carMakeViewModel.FindProperty("MakeId")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)petNameColumnBase0, carMakeViewModel.FindProperty("PetName")!, autoLotSamplesViewModelsCarMakeViewModelMappingBase);

            var tableMappings5 = new List<TableMapping>();
            carMakeViewModel.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var carMakeViewModelsTable = new Table("CarMakeViewModels", null, relationalModel);
            var carIdColumn = new Column("CarId", "int", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("CarId", carIdColumn);
            var colorColumn0 = new Column("Color", "nvarchar(max)", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("Color", colorColumn0);
            var dateBuildColumn = new Column("DateBuild", "datetime2", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("DateBuild", dateBuildColumn);
            var displayColumn0 = new Column("Display", "nvarchar(max)", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("Display", displayColumn0);
            var isDrivableColumn0 = new Column("IsDrivable", "bit", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("IsDrivable", isDrivableColumn0);
            var makeColumn = new Column("Make", "nvarchar(max)", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("Make", makeColumn);
            var makeIdColumn0 = new Column("MakeId", "int", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("MakeId", makeIdColumn0);
            var petNameColumn0 = new Column("PetName", "nvarchar(max)", carMakeViewModelsTable);
            carMakeViewModelsTable.Columns.Add("PetName", petNameColumn0);
            relationalModel.Tables.Add(("CarMakeViewModels", null), carMakeViewModelsTable);
            var carMakeViewModelsTableMapping = new TableMapping(carMakeViewModel, carMakeViewModelsTable, true);
            carMakeViewModelsTable.AddTypeMapping(carMakeViewModelsTableMapping, false);
            tableMappings5.Add(carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(carIdColumn, carMakeViewModel.FindProperty("CarId")!, carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(colorColumn0, carMakeViewModel.FindProperty("Color")!, carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(dateBuildColumn, carMakeViewModel.FindProperty("DateBuild")!, carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(displayColumn0, carMakeViewModel.FindProperty("Display")!, carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(isDrivableColumn0, carMakeViewModel.FindProperty("IsDrivable")!, carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(makeColumn, carMakeViewModel.FindProperty("Make")!, carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(makeIdColumn0, carMakeViewModel.FindProperty("MakeId")!, carMakeViewModelsTableMapping);
            RelationalModel.CreateColumnMapping(petNameColumn0, carMakeViewModel.FindProperty("PetName")!, carMakeViewModelsTableMapping);

            var sqlQueryMappings = new List<SqlQueryMapping>();
            carMakeViewModel.SetRuntimeAnnotation("Relational:SqlQueryMappings", sqlQueryMappings);
            var autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery = new SqlQuery("AutoLot.Samples.ViewModels.CarMakeViewModel.MappedSqlQuery", relationalModel, "\r\n                SELECT m.Id MakeId, m.Name Make, i.Id CarId, i.IsDrivable, \r\n                   i.DisplayName, i.DateBuild, i.Color, i.PetName\r\n                FROM dbo.Makes m \r\n                INNER JOIN dbo.Inventory i ON i.MakeId = m.Id");
            var carIdSqlQueryColumn = new SqlQueryColumn("CarId", "int", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("CarId", carIdSqlQueryColumn);
            var colorSqlQueryColumn = new SqlQueryColumn("Color", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("Color", colorSqlQueryColumn);
            var dateBuildSqlQueryColumn = new SqlQueryColumn("DateBuild", "datetime2", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("DateBuild", dateBuildSqlQueryColumn);
            var displaySqlQueryColumn = new SqlQueryColumn("Display", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("Display", displaySqlQueryColumn);
            var isDrivableSqlQueryColumn = new SqlQueryColumn("IsDrivable", "bit", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("IsDrivable", isDrivableSqlQueryColumn);
            var makeSqlQueryColumn = new SqlQueryColumn("Make", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("Make", makeSqlQueryColumn);
            var makeIdSqlQueryColumn = new SqlQueryColumn("MakeId", "int", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("MakeId", makeIdSqlQueryColumn);
            var petNameSqlQueryColumn = new SqlQueryColumn("PetName", "nvarchar(max)", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.Columns.Add("PetName", petNameSqlQueryColumn);
            relationalModel.Queries.Add("AutoLot.Samples.ViewModels.CarMakeViewModel.MappedSqlQuery", autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery);
            var autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping = new SqlQueryMapping(carMakeViewModel, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery, true);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQuery.AddTypeMapping(autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping, false);
            sqlQueryMappings.Add(autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping.IsDefaultSqlQueryMapping = true;
            RelationalModel.CreateSqlQueryColumnMapping(carIdSqlQueryColumn, carMakeViewModel.FindProperty("CarId")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(colorSqlQueryColumn, carMakeViewModel.FindProperty("Color")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(dateBuildSqlQueryColumn, carMakeViewModel.FindProperty("DateBuild")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(displaySqlQueryColumn, carMakeViewModel.FindProperty("Display")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(isDrivableSqlQueryColumn, carMakeViewModel.FindProperty("IsDrivable")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(makeSqlQueryColumn, carMakeViewModel.FindProperty("Make")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(makeIdSqlQueryColumn, carMakeViewModel.FindProperty("MakeId")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(petNameSqlQueryColumn, carMakeViewModel.FindProperty("PetName")!, autoLotSamplesViewModelsCarMakeViewModelMappedSqlQuerySqlQueryMapping);
            var fK_Inventory_Makes_MakeId = new ForeignKeyConstraint(
                "FK_Inventory_Makes_MakeId", inventoryTable, makesTable,
                new[] { makeIdColumn },
                makesTable.FindUniqueConstraint("PK_Makes")!, ReferentialAction.NoAction);
            var fK_Inventory_Makes_MakeIdFk = RelationalModel.GetForeignKey(this,
                "AutoLot.Samples.Models.Car",
                new[] { "MakeId" },
                "AutoLot.Samples.Models.Make",
                new[] { "Id" });
            fK_Inventory_Makes_MakeId.MappedForeignKeys.Add(fK_Inventory_Makes_MakeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Inventory_Makes_MakeIdFk).Add(fK_Inventory_Makes_MakeId);
            inventoryTable.ForeignKeyConstraints.Add(fK_Inventory_Makes_MakeId);
            makesTable.ReferencingForeignKeyConstraints.Add(fK_Inventory_Makes_MakeId);
            var fK_InventoryDriver_Drivers_DriverId = new ForeignKeyConstraint(
                "FK_InventoryDriver_Drivers_DriverId", inventoryToDriversTable, driversTable,
                new[] { driverIdColumn },
                driversTable.FindUniqueConstraint("PK_Drivers")!, ReferentialAction.Cascade);
            var fK_InventoryDriver_Drivers_DriverIdFk = RelationalModel.GetForeignKey(this,
                "AutoLot.Samples.Models.CarDriver",
                new[] { "DriverId" },
                "AutoLot.Samples.Models.Driver",
                new[] { "Id" });
            fK_InventoryDriver_Drivers_DriverId.MappedForeignKeys.Add(fK_InventoryDriver_Drivers_DriverIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_InventoryDriver_Drivers_DriverIdFk).Add(fK_InventoryDriver_Drivers_DriverId);
            inventoryToDriversTable.ForeignKeyConstraints.Add(fK_InventoryDriver_Drivers_DriverId);
            driversTable.ReferencingForeignKeyConstraints.Add(fK_InventoryDriver_Drivers_DriverId);
            var fK_InventoryDriver_Inventory_InventoryId = new ForeignKeyConstraint(
                "FK_InventoryDriver_Inventory_InventoryId", inventoryToDriversTable, inventoryTable,
                new[] { inventoryIdColumn },
                inventoryTable.FindUniqueConstraint("PK_Inventory")!, ReferentialAction.NoAction);
            var fK_InventoryDriver_Inventory_InventoryIdFk = RelationalModel.GetForeignKey(this,
                "AutoLot.Samples.Models.CarDriver",
                new[] { "CarId" },
                "AutoLot.Samples.Models.Car",
                new[] { "Id" });
            fK_InventoryDriver_Inventory_InventoryId.MappedForeignKeys.Add(fK_InventoryDriver_Inventory_InventoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_InventoryDriver_Inventory_InventoryIdFk).Add(fK_InventoryDriver_Inventory_InventoryId);
            inventoryToDriversTable.ForeignKeyConstraints.Add(fK_InventoryDriver_Inventory_InventoryId);
            inventoryTable.ReferencingForeignKeyConstraints.Add(fK_InventoryDriver_Inventory_InventoryId);
            var fK_Radios_Inventory_InventoryId = new ForeignKeyConstraint(
                "FK_Radios_Inventory_InventoryId", radiosTable, inventoryTable,
                new[] { inventoryIdColumn0 },
                inventoryTable.FindUniqueConstraint("PK_Inventory")!, ReferentialAction.Cascade);
            var fK_Radios_Inventory_InventoryIdFk = RelationalModel.GetForeignKey(this,
                "AutoLot.Samples.Models.Radio",
                new[] { "CarId" },
                "AutoLot.Samples.Models.Car",
                new[] { "Id" });
            fK_Radios_Inventory_InventoryId.MappedForeignKeys.Add(fK_Radios_Inventory_InventoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Radios_Inventory_InventoryIdFk).Add(fK_Radios_Inventory_InventoryId);
            radiosTable.ForeignKeyConstraints.Add(fK_Radios_Inventory_InventoryId);
            inventoryTable.ReferencingForeignKeyConstraints.Add(fK_Radios_Inventory_InventoryId);
            return relationalModel.MakeReadOnly();
        }
    }
}
